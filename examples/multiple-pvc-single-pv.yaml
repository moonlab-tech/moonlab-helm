# Multiple PVCs binding to a single PV example
# This demonstrates how one PV can serve multiple PVCs

---
# Step 1: Create a PV with ReadWriteMany access
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shared-media-pv
spec:
  capacity:
    storage: 1Ti
  accessModes:
    - ReadWriteMany  # ‚Üê Allows multiple PVCs to bind
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-storage
  nfs:
    server: nfs-server.example.com
    path: /media

---
# Step 2: Create PVC in radarr namespace
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-media-pvc
  namespace: radarr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: nfs-storage

---
# Step 3: Create PVC in jellyfin namespace
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-media-pvc
  namespace: jellyfin
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: nfs-storage

---
# Step 4: Create PVC in sonarr namespace
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-media-pvc
  namespace: sonarr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: nfs-storage

---
# Step 5: Radarr deployment using the PVC
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - name: radarr
        image: ghcr.io/home-operations/radarr:latest
        ports:
        - containerPort: 7878
        volumeMounts:
        - name: media-storage
          mountPath: /media
      volumes:
      - name: media-storage
        persistentVolumeClaim:
          claimName: radarr-media-pvc

---
# Step 6: Jellyfin deployment using the PVC
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      containers:
      - name: jellyfin
        image: jellyfin/jellyfin:latest
        ports:
        - containerPort: 8096
        volumeMounts:
        - name: media-storage
          mountPath: /media
      volumes:
      - name: media-storage
        persistentVolumeClaim:
          claimName: jellyfin-media-pvc

---
# Step 7: Sonarr deployment using the PVC
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: sonarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
      - name: sonarr
        image: ghcr.io/home-operations/sonarr:latest
        ports:
        - containerPort: 8989
        volumeMounts:
        - name: media-storage
          mountPath: /media
      volumes:
      - name: media-storage
        persistentVolumeClaim:
          claimName: sonarr-media-pvc 